

Part 1: Working with tasks
#1- INSERT INTO task(title, description, created, updated, due_date, status_id, user_id)
VALUES ('task1', 'this is task 1 description', NOW(), NOW(), '2025-04-29', 1, 1);

#2 - UPDATE task
SET title = 'new title'
WHERE id = 1;

#3 - UPDATE task
SET due_date = '2026-06-06'
WHERE id = 1;

#4 - UPDATE task
SET status_id = 2
WHERE id = 1;

//status_id = 3 => complete
#5 - UPDATE task
SET status_id = 3
WHERE id = 1;

#6 - DELETE FROM task
WHERE id = 1;

Part 2: School database
#1 - CREATE DATABASE school;
#2 - USE school;
#3 - CREATE TABLE class (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    begins DATE,
    ends DATE
);
#4 - CREATE TABLE student (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255),
    phone VARCHAR(20),
    class_id INT,
    FOREIGN KEY (class_id) REFERENCES class(id)
);

Part 3: More queries

#1 - SELECT task.*
FROM task
JOIN user_task ON task.id = user_task.task_id
JOIN user ON user_task.user_id = user.id
WHERE user.email LIKE '%@spotify.com';

#2 - SELECT task.*
FROM task
JOIN user_task ON task.id = user_task.task_id
JOIN user ON user_task.user_id = user.id
JOIN status ON task.status_id = status.id
WHERE user.name = 'Donald Duck'
  AND status.name = 'Not started';

#3 - SELECT task.*
FROM task
JOIN user_task ON task.id = user_task.task_id
JOIN user ON user_task.user_id = user.id
WHERE user.name = 'Maryrose Meadows'
  AND MONTH(task.created) = 9;

#4 - SELECT MONTH(created) AS month_number, COUNT(*) AS total_tasks
FROM task
GROUP BY MONTH(created)
ORDER BY month_number;

Part 4: Creating a database
 #1 Create all tables


 /* 
Books Genres -> 1->n
Books to Racks -> n -> 1
Books  to Members -> n -> n 
*/

 CREATE TABLE genres (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE racks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    location VARCHAR(255) NOT NULL
);

CREATE TABLE books (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(255),
    genre_id INT,
    rack_id INT,
    FOREIGN KEY (genre_id) REFERENCES genres(id),
    FOREIGN KEY (rack_id) REFERENCES racks(id)
);

CREATE TABLE members (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE,
    phone VARCHAR(20)
);

CREATE TABLE borrowing_log (
    id INT AUTO_INCREMENT PRIMARY KEY,
    member_id INT,
    book_id INT,
    borrowed_at DATE NOT NULL,
    returned_at DATE,
    FOREIGN KEY (member_id) REFERENCES members(id),
    FOREIGN KEY (book_id) REFERENCES books(id)
);



